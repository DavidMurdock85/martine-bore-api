const products = require("./products/products");
const mysql = require('mysql2/promise');
const { dbUser, dbPassword, dbName } = require("../envVars");

const main = async () => {

  const connection = await mysql.createConnection(`mysql://${dbUser}:${dbPassword}@0.0.0.0:3306/${dbName}`);

  const productsList = products.products;

  console.log('Inserting products...');
  // for each product in products
  await Promise.all(Object.keys(productsList).map(async (productRoute) => {
    const product = productsList[productRoute];

    //console.log(`${index} : ${categoryId}`);
    // get categoryId (this is a number that was autogenerated when the category table was populated) for the category string in the product object
    // so we are getting the id for the category that has a route === to product.category
    if (product.category) {
      try {
        console.log(`Getting category for product ${productRoute}`);

        const [rows] = await connection.query(`SELECT id FROM categories where route='${product.category}'`);
        const category = rows[0];

        if (category !== undefined) {
          const categoryId = category.id;

          // query to access products
          const [result] = await connection.query('INSERT INTO products SET ?', {
            categoryId: categoryId,
            route: productRoute,
            title: product.productTitle,
            period: product.period,
            date: product.date,
            origin: product.origin,
            maker: product.maker,
            medium: product.medium,
            description: product.description,
            dimensions: product.dimensions,
            productCondition: product.productCondition,
            price: product.price
          });

          const productId = result.insertId;

          console.log(`Inserting images for product: ${productId}`);

          return await Promise.all(product.images.map(async (image) => {
            return await connection.query('INSERT INTO images SET ?', {
              productId,
              original: image.original,
              thumbnail: image.thumbnail
            });
          }));
        }
      } catch (err) {
        console.log(err);
      }
    } else {
      console.log(`product had no category: ${productRoute}`);
    }
  }));

  console.log('Done. Exiting.');
  process.exit(1);
}

main();

// database password changed to: password
      // to run sql scripts log into database first `mysql -u root -p martine` -> $source /path/to/file.sql

      // NOTE: use pwd command to get full path of file (example: /Users/david/martine-bore-antiques/martine-bore-website-next-js/database/categories.sql)
      // to run node scripts use `$node <script/path.js>` exampe: $node database-query.js
      // create products table to recieved data

// Deleting and Creating new tables
// in mysql
// 1. mysql -u root -p martine
// 2. drop table products;
// 3. go out of sql run ->  source /Users/david/martine-bore-antiques/martine-bore-website-next-js/database/schema.sql on the command line
// exit
// terminal
// 5. node  products/migrateProducts.js

//Accessing Date
//mysql> select id, categoryId, productTitle from products where categoryId = 2

// MYSQL stuff
      // show databases;
      // use martine; -- this sets the database you are "using" to martine
      // show tables;
      // describe table <table-name>
      // select * from <table-name>;
      // exp -- delete from products

      // select * from categories;

// inquire about cdn content  ..... image bucketing

// ALTER TABLE products ADD route varchar(200);